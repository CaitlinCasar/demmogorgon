#' import otu table function
#'
#' This function reads your data file, formats sample ID's and taxa names, and converts
#' absolute abundances to relative abundances.
#' @param filename is the name of the otu table with sample ID's as col names and taxa as row names
#' @keywords import
#' @export
#' @examples
#' import_otu_table("filename") #returns normalized otu table
#' import_otu_table("filename", normalize=FALSE) #returns otu table with absolute abundances
#'
import_otu_table <- function(filename, normalize=TRUE){
if(normalize==TRUE){
`%>%` <- magrittr::`%>%`
#import rarefied family-level OTU table from Qiime
raw.data <- read.csv(filename, header=TRUE, stringsAsFactors = FALSE, row.names = 1)
#remove 'X' from sample ID's
colnames(raw.data) = gsub("X", "", colnames(raw.data))
#format taxa names
rownames(raw.data) <- gsub("D_0__Archaea;Other;Other;Other;Other", "Archaea.Other", rownames(raw.data))
rownames(raw.data) <- gsub("D_0__Bacteria;Other;Other;Other;Other", "Bacteria.Other", rownames(raw.data))
rownames(raw.data) <- gsub("D_0__Bacteria;D_1__Proteobacteria;Other;Other;Other", "Proteobacteria.Other", rownames(raw.data))
rownames(raw.data) <- gsub("D_0__Archaea;|D_0__Bacteria;|D_1__Proteobacteria;|D_1__|D_2__|D_3__|D_4__|D_5__", "", rownames(raw.data))
rownames(raw.data) <- gsub("Unknown;Other;Other;Other;Other", "Unassigned",rownames(raw.data))
rownames(raw.data) <- gsub(";", ".",rownames(raw.data))
rownames(raw.data) <- gsub("Gammaproteobacteria.Betaproteobacteriales", "Betaproteobacteria.Betaproteobacteriales",rownames(raw.data))
#delete rows that sum to 0
raw.data = raw.data[ rowSums(raw.data[1:length(colnames(raw.data))])!=0, ]
#convert absolute abundances to relative abundances - note that colsums = 100 (not 1)
data.rel.abundance <- raw.data %>%
dplyr::mutate_at(dplyr::vars(1:length(colnames(raw.data))), dplyr::funs(as.numeric(paste0(100*./sum(.)))))
rownames(data.rel.abundance) <- rownames(raw.data)
data.rel.abundance <- as.data.frame(t(data.rel.abundance))
data.rel.abundance$sample.name <- rownames(data.rel.abundance)
data.rel.abundance
}else{
`%>%` <- magrittr::`%>%`
#import rarefied family-level OTU table from Qiime
raw.data <- read.csv(filename, header=TRUE, stringsAsFactors = FALSE, row.names = 1)
#remove 'X' from sample ID's
colnames(raw.data) = gsub("X", "", colnames(raw.data))
#format taxa names
rownames(raw.data) <- gsub("D_0__Archaea;Other;Other;Other;Other", "Archaea.Other", rownames(raw.data))
rownames(raw.data) <- gsub("D_0__Bacteria;Other;Other;Other;Other", "Bacteria.Other", rownames(raw.data))
rownames(raw.data) <- gsub("D_0__Bacteria;D_1__Proteobacteria;Other;Other;Other", "Proteobacteria.Other", rownames(raw.data))
rownames(raw.data) <- gsub("D_0__Archaea;|D_0__Bacteria;|D_1__Proteobacteria;|D_1__|D_2__|D_3__|D_4__|D_5__", "", rownames(raw.data))
rownames(raw.data) <- gsub("Unknown;Other;Other;Other;Other", "Unassigned",rownames(raw.data))
rownames(raw.data) <- gsub(";", ".",rownames(raw.data))
rownames(raw.data) <- gsub("Gammaproteobacteria.Betaproteobacteriales", "Betaproteobacteria.Betaproteobacteriales",rownames(raw.data))
#delete rows that sum to 0
raw.data = raw.data[ rowSums(raw.data[1:length(colnames(raw.data))])!=0, ]
raw.data <- as.data.frame(t(raw.data))
}
}
random_list <- c(1,2,3)
random_variable <- random_list*2
library ( openxlsx )
spreadsheet_data <- read.xlsx ( "GTDBtk_NCBI_dictionary.xlsx" )
wb <- createWorkbook()
addWorksheet(wb, "cellIs")
addWorksheet(wb, "Moving Row")
addWorksheet(wb, "Moving Col")
addWorksheet(wb, "Dependent on")
addWorksheet(wb, "Duplicates")
addWorksheet(wb, "containsText")
addWorksheet(wb, "colourScale", zoom = 30)
addWorksheet(wb, "databar")
addWorksheet(wb, "between")
addWorksheet(wb, "logical operators")
negStyle <- createStyle(fontColour = "#9C0006", bgFill = "#FFC7CE")
posStyle <- createStyle(fontColour = "#006100", bgFill = "#C6EFCE")
## color cells <= 0 red, > 0 green
writeData(wb, "cellIs", -5:5)
writeData(wb, "cellIs", LETTERS[1:11], startCol=2)
conditionalFormatting(wb, "cellIs", cols=1, rows=1:11, rule="<=0", style = negStyle)
conditionalFormatting(wb, "cellIs", cols=1, rows=1:11, rule=">0", style = posStyle)
## highlight row dependent on first cell in row
writeData(wb, "Moving Row", -5:5)
writeData(wb, "Moving Row", LETTERS[1:11], startCol=2)
conditionalFormatting(wb, "Moving Row", cols=1:2, rows=1:11, rule="$A1<0", style = negStyle)
conditionalFormatting(wb, "Moving Row", cols=1:2, rows=1:11, rule="$A1>0", style = posStyle)
## highlight column dependent on first cell in column
writeData(wb, "Moving Col", -5:5)
writeData(wb, "Moving Col", LETTERS[1:11], startCol=2)
conditionalFormatting(wb, "Moving Col", cols=1:2, rows=1:11, rule="A$1<0", style = negStyle)
conditionalFormatting(wb, "Moving Col", cols=1:2, rows=1:11, rule="A$1>0", style = posStyle)
## highlight entire range cols X rows dependent only on cell A1
writeData(wb, "Dependent on", -5:5)
writeData(wb, "Dependent on", LETTERS[1:11], startCol=2)
conditionalFormatting(wb, "Dependent on", cols=1:2, rows=1:11, rule="$A$1<0", style = negStyle)
conditionalFormatting(wb, "Dependent on", cols=1:2, rows=1:11, rule="$A$1>0", style = posStyle)
## highlight cells in column 1 based on value in column 2 - >=0.5 green, <0.5 red
writeData(wb, "Dependent on", data.frame(x = 1:10, y = runif(10)), startRow = 15)
conditionalFormatting(wb, "Dependent on", cols=1, rows=16:25, rule="B16<0.5", style = negStyle)
conditionalFormatting(wb, "Dependent on", cols=1, rows=16:25, rule="B16>=0.5", style = posStyle)
## highlight duplicates using default style
writeData(wb, "Duplicates", sample(LETTERS[1:15], size = 10, replace = TRUE))
conditionalFormatting(wb, "Duplicates", cols = 1, rows = 1:10, type = "duplicates")
## cells containing the letter "A"
fn <- function(x) paste(sample(LETTERS, 10), collapse = "-")
writeData(wb, "containsText", sapply(1:10, fn))
conditionalFormatting(wb, "containsText", cols = 1, rows = 1:10, type = "contains", rule = "A")
## colourscale colours cells based on cell value
df <- read.xlsx(system.file("readTest.xlsx", package = "openxlsx"), sheet = 4)
writeData(wb, "colourScale", df, colNames=FALSE)  ## write data.frame
## rule is a vector or colours of length 2 or 3 (any hex colour or any of colours())
## If rule is NULL, min and max of cells is used. Rule must be the same length as style or NULL.
conditionalFormatting(wb, "colourScale", cols=1:ncol(df), rows=1:nrow(df),
style = c("black", "white"),
rule = c(0, 255),
type = "colourScale")
setColWidths(wb, "colourScale", cols = 1:ncol(df), widths = 1.07)
setRowHeights(wb, "colourScale", rows = 1:nrow(df), heights = 7.5)
## Databars
writeData(wb, "databar", -5:5)
conditionalFormatting(wb, "databar", cols = 1, rows = 1:11, type = "databar") ## Default colours
## Betweem
# Highlight cells in interval [-2, 2]
writeData(wb, "between", -5:5)
conditionalFormatting(wb, "between", cols = 1, rows = 1:11, type = "between", rule = c(-2,2))
## Logical Operators for 1,3,5 or 7
# You can use Excels logical Opertors
writeData(wb, "logical operators", 1:10)
conditionalFormatting(wb, "logical operators", cols = 1, rows = 1:10,
rule = "OR($A1=1,$A1=3,$A1=5,$A1=7)")
saveWorkbook(wb, "conditionalFormattingExample.xlsx", TRUE)
wd()
wd
document()
roxygen2::document()
library(devtools)
library(roxygen2)
document()
install("demmogorgon")
ls
setwd("~/Desktop/DeMMO_Pubs/demmogorgon")
install("demmogorgon")
setwd("~/Desktop/DeMMO_Pubs/demmogorgon/R")
install("demmogorgon")
setwd("~/Desktop/DeMMO_Pubs/
")"
setwd("~/Desktop/DeMMO_Pubs/")
install("demmogorgon")
search()
R CMD check
devtools::check()
setwd("~/Desktop/DeMMO_Pubs")
devtools::check()
devtools::check()
setwd("~/Desktop/DeMMO_Pubs/demmogorgon")
devtools::check()
document()
build()
library(devtools)
build()
setwd("~/Desktop/DeMMO_Pubs/demmogorgon")
build()
